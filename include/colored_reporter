#pragma once
#ifndef PPTEST_COLORED_REPORTER
#define PPTEST_COLORED_REPORTER
#include <cstdarg>
#include "pptest"

namespace pptest {

namespace _ {

#if defined(WIN32) || defined(_WIN32) || defined(WIN64) || defined(__CYGWIN__)
	#define VC_EXTRALEAN 1
	#define WIN32_LEAN_AND_MEAN 1
	#include <Windows.h>

	static constexpr WORD COLOR_BLACK        = 0x0000;
	static constexpr WORD COLOR_DARK_BLUE    = 0x0001;
	static constexpr WORD COLOR_DARK_GREEN   = 0x0002;
	static constexpr WORD COLOR_DARK_CYAN    = 0x0003;
	static constexpr WORD COLOR_DARK_RED     = 0x0004;
	static constexpr WORD COLOR_DARK_MAGENTA = 0x0005;
	static constexpr WORD COLOR_DARK_YELLOW  = 0x0006;
	static constexpr WORD COLOR_WHITE        = 0x0007;
	static constexpr WORD COLOR_GRAY         = 0x0008;
	static constexpr WORD COLOR_BLUE         = 0x0009;
	static constexpr WORD COLOR_GREEN        = 0x000A;
	static constexpr WORD COLOR_CYAN         = 0x000B;
	static constexpr WORD COLOR_RED          = 0x000C;
	static constexpr WORD COLOR_MAGENTA      = 0x000D;
	static constexpr WORD COLOR_YELLOW       = 0x000E;

	void 
	clprintf(WORD color, const char * format, ...)
	{
		const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
		CONSOLE_SCREEN_BUFFER_INFO buffer_info;
		GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
		WORD old_color_attrs = buffer_info.wAttributes;
		WORD new_color = color;
		va_list vargs;
		va_start(vargs, format);
		SetConsoleTextAttribute(stdout_handle, new_color);
		vprintf(format, vargs);
		va_end(vargs);
		SetConsoleTextAttribute(stdout_handle, old_color_attrs);
	}

#else

	static constexpr short COLOR_BLACK        = 0x0001;
	static constexpr short COLOR_DARK_BLUE    = 0x0002;
	static constexpr short COLOR_DARK_GREEN   = 0x0003;
	static constexpr short COLOR_DARK_CYAN    = 0x0004;
	static constexpr short COLOR_DARK_RED     = 0x0005;
	static constexpr short COLOR_DARK_MAGENTA = 0x0006;
	static constexpr short COLOR_DARK_YELLOW  = 0x0007;
	static constexpr short COLOR_WHITE        = 0x0008;
	static constexpr short COLOR_GRAY         = 0x0009;
	static constexpr short COLOR_BLUE         = 0x000A;
	static constexpr short COLOR_GREEN        = 0x000B;
	static constexpr short COLOR_CYAN         = 0x000C;
	static constexpr short COLOR_RED          = 0x000D;
	static constexpr short COLOR_MAGENTA      = 0x000E;
	static constexpr short COLOR_YELLOW       = 0x000F;
	
	// colored implementation not available
	void 
	clprintf(short color, const char* format, ...)
	{
		va_list vargs;
		va_start(vargs, format);
		vprintf(format, vargs);
		va_end(vargs);
	}

#endif

} // namespace _

template <class C>
class ColoredReporter : public Reporter<C>
{
	void 
	_report_assertion(Assertion const & assertion)
	{
		_::clprintf(assertion._status == Status::Pass ? _::COLOR_GREEN : _::COLOR_RED,
			"\n      | %-4s |", cstr_status[int(assertion._status)]);
		_::clprintf(assertion._status == Status::Pass ? _::COLOR_GRAY : _::COLOR_BLUE,
			" %32s:%-5d ", assertion._position._file, assertion._position._line);
		_::clprintf(assertion._status == Status::Pass ? _::COLOR_GRAY : _::COLOR_WHITE,
			"| %s(%s)", assertion._command, assertion._assertion);
		fflush(stdout);
	}

	ReporterSettings _settings {};

 public:
	virtual ~ColoredReporter() = default;

	ColoredReporter() = default;

	ColoredReporter(ReporterSettings const & settings_)
		: _settings { settings_ }
	{}

	virtual void 
	report_test_run(Test<C> & test_) noexcept override
	{
		if(_settings.report_test_run)
		{
			_::clprintf(_::COLOR_MAGENTA, "\n%s: ", test_.name());
			fflush(stdout);
		}
	}

	virtual void 
	report_test_end(Test<C> & test_, int passed_, int failed_) noexcept override
	{
		if(_settings.report_test_end)
		{
			bool minimal_ = !(_settings.report_fail || _settings.report_pass || _settings.report_testcase_run || _settings.report_testcase_end || _settings.report_unhandled_exception);
			if(!minimal_ || !_settings.report_test_run)
				_::clprintf(_::COLOR_MAGENTA, "\n%s", test_.name());
			_::clprintf(_::COLOR_WHITE, " | ");
			_::clprintf(failed_ == 0 ? _::COLOR_GREEN : _::COLOR_RED, "%d/%d %s.\n"
				, _settings.optimistic ? passed_ : failed_
				, (failed_+passed_)
				, _settings.optimistic ? "passed" : "failed");
			fflush(stdout);
		}
	}

	virtual void 
	report_testcase_run(Test<C> & test_, Testcase<C> & testcase_) noexcept override
	{
		if(_settings.report_testcase_run)
		{
			_::clprintf(_::COLOR_CYAN, "\n   %s ", testcase_.name());
			fflush(stdout);
		}
	}
	

	virtual void 
	report_testcase_end(Test<C> & test_, Testcase<C> & testcase_, int passed_, int failed_) noexcept override
	{
		if(_settings.report_testcase_end)
		{
			bool minimal_ = !(_settings.report_fail || _settings.report_pass || _settings.report_unhandled_exception);
			if(!minimal_ || !_settings.report_testcase_run)
				_::clprintf(_::COLOR_CYAN, "\n   %s", testcase_.name());
			_::clprintf(_::COLOR_WHITE, " | ");
			_::clprintf(failed_ == 0 ? _::COLOR_GREEN : _::COLOR_RED, "%d/%d %s."
				, _settings.optimistic ? passed_ : failed_
				, (failed_+passed_)
				, _settings.optimistic ? "passed" : "failed");
			fflush(stdout);
		}
	}

	virtual void 
	report_pass(Test<C> & test_, Testcase<C> & testcase_, Assertion const & assertion) noexcept override
	{
		if(_settings.report_pass)
			_report_assertion(assertion);
	}

	virtual void 
	report_fail(Test<C> & test_, Testcase<C> & testcase_, Assertion const & assertion) noexcept override
	{
		if(_settings.report_fail)
			_report_assertion(assertion);
	}

	virtual void 
	report_unhandled_exception(Test<C> & test_, Testcase<C> & testcase_) noexcept override
	{
		if(_settings.report_unhandled_exception)
		{
			_::clprintf(_::COLOR_YELLOW, "\n      | Unhandled Exception |");
			_::clprintf(_::COLOR_BLUE, " %s:%d", testcase_.position()._file, testcase_.position()._line);
			fflush(stdout);
		}
	}

};

template <class C>
using colored_reporter = ColoredReporter<C>;

} // namespace pptest

#endif // PPTEST_COLORED_REPORTER
