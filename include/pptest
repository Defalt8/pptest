/**
 * @file pptest
 * @author Natnael (the.defalt8@gmail.com)
 * @brief Unit-Testing library
 * @version 1.6.30
 * @date 2022-11-01
 * 
 * @copyright Copyright (c) 2022 MIT License
 * 
 * 
 *  snake_case aliases are provided for classes and typedefs.
 * 
 * - Test<C>     -- Base class for all tests.
 * - Testcase<C> -- Base class for all testcases.
 * - Assertion   -- structure used to store assertion data.
 * - TestSummary -- structure used to store test summary onto.
 * 
 * - Reporter<C> -- Derive this class for your custom reporters.
 * - ReporterSettings { quiet, verbose, normal, only_failing, only_passing,
 * 					 , minimal1, minimal2, minimal3, minimal4 }
 *  
 * - StdPrinter<C> -- Default provided console/file reporter.
 *                   Can output to files given a valid file handle.
 * 
 * - Test definition macros with brief example.
 *   NOTE: You can run tests inside tests. 
 * 
 *     Test(TestID)
 *     {
 *       Prerun(TestcaseID) {}
 *       Postrun(TestcaseID) {}
 * 
 *       Testcase(TestID,TestcaseID)
 *       {
 *       } TestcaseEnd(TestID,TestcaseID);
 * 
 *       Registry(TestID)
 *       {
 *           Register(TestID, TestcaseID)
 *       };
 * 
 *     } TestEnd(TestID);
 * 
 *  - Assertion macros -- Asserts break/return on failure while Expects do not.
 * 
 *    - AssertTrue      | ASSERT_True        -- must be true
 *    - AssertFalse     | ASSERT_False       -- must be false
 *    - AssertNull      | ASSERT_Null        -- must be null
 *    - AssertNotNull   | ASSERT_NotNull     -- must not be null
 *    - AssertEQ        | ASSERT_EQ          -- must be equal
 *    - AssertNEQ       | ASSERT_NEQ         -- must not be equal
 *    - AssertGT        | ASSERT_GT          -- must be greater than
 *    - AssertLT        | ASSERT_LT          -- must be less than
 *    - AssertGE        | ASSERT_GE          -- must be greater than or equal to
 *    - AssertLE        | ASSERT_LE          -- must be less than or equal to
 *    - AssertThrow     | ASSERT_Throw       -- must throw the exception specified
 *    - AssertNoThrow   | ASSERT_NoThrow     -- must not throw the exception specified
 *    - AssertThrowAny  | ASSERT_ThrowAny    -- must throw any exceptions
 *    - AssertThrowNone | ASSERT_ThrowNone   -- must not throw any exceptions
 *    - ExpectTrue      | EXPECT_True        -- expect true
 *    - ExpectFalse     | EXPECT_False       -- expect false
 *    - ExpectNull      | EXPECT_Null        -- expect null
 *    - ExpectNotNull   | EXPECT_NotNull     -- expect not null
 *    - ExpectEQ        | EXPECT_EQ          -- expect equal
 *    - ExpectNEQ       | EXPECT_NEQ         -- expect not equal
 *    - ExpectGT        | EXPECT_GT          -- expect greater than
 *    - ExpectLT        | EXPECT_LT          -- expect less than
 *    - ExpectGE        | EXPECT_GE          -- expect greater than or equal to
 *    - ExpectLE        | EXPECT_LE          -- expect less than or equal to
 *    - ExpectThrow     | EXPECT_Throw       -- expected to throw the exception specified
 *    - ExpectNoThrow   | EXPECT_NoThrow     -- expected not to throw the exception specified
 *    - ExpectThrowAny  | EXPECT_ThrowAny    -- expected to throw any exceptions
 *    - ExpectThrowNone | EXPECT_ThrowNone   -- expected not to throw any exceptions 
 * 
 */

#pragma once
#ifndef PPTEST
#define PPTEST

#include <cstddef>
#include <cstdint>
#include <cstdio>

namespace pptest {

static constexpr struct Version { uint16_t major = 1, minor = 6, patch = 30; } version {};

using cstring_t = char const *;

template <class C> class Test;
template <class C> class Testcase;

enum class Status
{
	Unknown = 0,
	Pass,
	Fail
};

static constexpr cstring_t 
cstr_status[]
{
	"Unkn",
	"Pass",
	"Fail"
};

struct Position
{
	cstring_t file = nullptr;
	int       line = 0;
};

struct Assertion
{
	cstring_t command   = nullptr;
	cstring_t assertion = nullptr;
	Position  position  = {};
	bool      breaking  = false;
	Status    status    = Status::Unknown;
};

struct TestSummary
{
	int passing = 0;
	int failing = 0;
	int passing_assertions = 0;
	int failing_assertions = 0;
};

struct ReporterSettings
{
	bool optimistic  = true;
	bool report_pass = false;
	bool report_fail = true;
	bool report_testcase_run = true;
	bool report_testcase_end = false;
	bool report_test_run = true;
	bool report_test_end = true;
	bool report_unhandled_exception = true;
	
};

static constexpr ReporterSettings quiet        = { true, false, false, false, false, false, false, false };
static constexpr ReporterSettings verbose      = { true, true, true, true, true, true, true, true };
static constexpr ReporterSettings normal       = { true, false, true, true, true, true, true, true };
static constexpr ReporterSettings minimal1     = { true, false, true, false, true, false, true, true };
static constexpr ReporterSettings minimal2     = { true, false, true, false, false, true, true, true };
static constexpr ReporterSettings minimal3     = { true, false, true, false, false, false, true, true };
static constexpr ReporterSettings minimal4     = { true, false, true, false, false, false, false, true };
static constexpr ReporterSettings only_failing = { true, false, true, false, false, false, false, true };
static constexpr ReporterSettings only_passing = { true, true, false, false, false, false, false, false };

template <class C>
class Reporter
{
 public:
	virtual ~Reporter() = default;

	virtual void report_test_run(Test<C> & test_, int depth_ = 0) noexcept {}
	virtual void report_test_end(Test<C> & test_, int passing_, int failing_, int depth_ = 0) noexcept {}
	virtual void report_testcase_run(Test<C> & test_, Testcase<C> & testcase_, int depth_ = 0) noexcept {}
	virtual void report_testcase_end(Test<C> & test_, Testcase<C> & testcase_, int passing_, int failing_, int depth_ = 0) noexcept {}
	virtual void report_pass(Test<C> & test_, Testcase<C> & testcase_, Assertion const & assertion, int depth_ = 0) noexcept {}
	virtual void report_fail(Test<C> & test_, Testcase<C> & testcase_, Assertion const & assertion, int depth_ = 0) noexcept {}
	virtual void report_unhandled_exception(Test<C> & test_, Testcase<C> & testcase_, int depth_ = 0) noexcept {}

};

template <class C>
class Test
{
	Position   _position {};
	C        * _test = nullptr;
	cstring_t  _name = nullptr;

	friend class Testcase<C>;
	
 protected:
	Test(Position const & position_, C & test_, cstring_t name_)
		: _position { position_ }
		, _test { &test_ }
		, _name { name_ }
	{}

	void 
	_on_pass(Reporter<C> & reporter_, Testcase<C> & testcase_, Assertion const & assertion, int depth_ = 0)
	{
		reporter_.report_pass(*this, testcase_, assertion, depth_);
	}

	void 
	_on_fail(Reporter<C> & reporter_, Testcase<C> & testcase_, Assertion const & assertion, int depth_ = 0)
	{
		reporter_.report_fail(*this, testcase_, assertion, depth_);
		if(assertion.breaking)
			throw assertion;
	}

 public:
	virtual ~Test() = default;
	
	virtual void prerun(pptest::Testcase<C> & testcase_)  {}
	virtual void postrun(pptest::Testcase<C> & testcase_, int passing_, int failing_) noexcept {}

	template <template <typename...> class R,
		typename = decltype(static_cast<Reporter<C> *>((R<C> *)nullptr))> 
	int 
	run_all(R<C> && reporter_, TestSummary * summary_out_ = nullptr, int depth_ = 0)
	{
		return this->run_all(static_cast<Reporter<C> &>(reporter_), summary_out_, depth_);
	}
	 
	int 
	run_all(TestSummary * summary_out_ = nullptr, int depth_ = 0)
	{
		Reporter<C> no_reporting;
		return this->run_all(no_reporting, summary_out_, depth_);
	}

	int 
	run_all(Reporter<C> & reporter_, TestSummary * summary_out_ = nullptr, int depth_ = 0)
	{
		auto & test_ = *_test; 
		auto & testcases_ = test_._pptest_testcase_mptrs;
		int total_passing_ = 0;
		int total_failing_ = 0;
		int total_passing_assertions_ = 0;
		int total_failing_assertions_ = 0;
		reporter_.report_test_run(test_, depth_);
		for(auto & testcase_ptr : testcases_)
		{
			int passing_ = 0;
			int failing_ = 0;
			auto & testcase = *(test_.*testcase_ptr);
			reporter_.report_testcase_run(test_, testcase, depth_);
			try 
			{
				prerun(testcase);
				testcase.run(reporter_, passing_, failing_, depth_);
			}
			catch(Assertion const & ex)
			{}
			catch(...)
			{
				++failing_;
				reporter_.report_unhandled_exception(test_, testcase, depth_);
			}
			postrun(testcase, passing_, failing_);
			reporter_.report_testcase_end(test_, testcase, passing_, failing_, depth_);
			if(failing_ > 0)
				++total_failing_;
			else
				++total_passing_;
			total_passing_assertions_ += passing_;
			total_failing_assertions_ += failing_;
		}
		reporter_.report_test_end(test_, total_passing_, total_failing_, depth_);
		if(summary_out_)
			*summary_out_ = { total_passing_, total_failing_, total_passing_assertions_, total_failing_assertions_ };
		return total_failing_;
	}
	
	Position const & position() const noexcept { return _position; }
	C       * test() const noexcept { return _test; }
	cstring_t name() const noexcept { return _name; }

};

template <class C>
class Testcase
{
	Position   _position = {};
	C        * _test     = nullptr;
	cstring_t  _name     = nullptr;

	friend class Test<C>;
	
 protected:
	Testcase(Position const & position_, C * test_, cstring_t name_)
		: _position { position_ }
		, _test     { test_ }
		, _name     { name_ }
	{}
	
	void 
	_on_assert(bool pass_, Reporter<C> & reporter_, int & passing_, int & failing_, Assertion assertion, int depth_ = 0)
	{
		if(pass_)
		{
			assertion.status = Status::Pass;
			++passing_;
			_test->_on_pass(reporter_, *this, assertion, depth_);
		}
		else
		{
			assertion.status = Status::Fail;
			++failing_;
			_test->_on_fail(reporter_, *this, assertion, depth_);
		}
	}

 public:
	virtual ~Testcase() = default;

	virtual void run(Reporter<C> & reporter_, int & _passing_, int & _failing_, int depth_ = 0) = 0;
	
	Position const & position() const noexcept { return _position; }
	C       * test() const noexcept { return _test; }
	cstring_t name() const noexcept { return _name; }

};


template <class C>
class StdPrinter : public Reporter<C>
{
	ReporterSettings _settings    {};
	FILE           * _file_handle = stdout;

	void
	_indent(int count_)
	{
		while(count_-- > 0)
			fprintf(_file_handle, "    ");
	}

	void 
	_report_assertion(Assertion const & assertion, int depth_ = 0)
	{
		fprintf(_file_handle, "\n");
		_indent(depth_ * 2 + 2);
		fprintf(_file_handle, "| %-4s | %s(%s) -- %s:%d"
			, cstr_status[int(assertion.status)]
			, assertion.command, assertion.assertion
			, assertion.position.file, assertion.position.line);
		fflush(_file_handle);
	}

 public:
	virtual ~StdPrinter() = default;

	StdPrinter() = default;

	StdPrinter(ReporterSettings const & settings_)
		: _settings { settings_ }
	{}

	StdPrinter(FILE * file_handle_)
		: _file_handle { file_handle_ }
	{}

	StdPrinter(FILE * file_handle_, ReporterSettings const & settings_)
		: _file_handle { file_handle_ }
		, _settings    { settings_ }
	{}

	virtual void 
	report_test_run(Test<C> & test_, int depth_ = 0) noexcept override
	{
		if(_settings.report_test_run)
		{
			fprintf(_file_handle, "\n");
			_indent(depth_ * 2);
			fprintf(_file_handle, "%s: ", test_.name());
			fflush(_file_handle);
		}
	}

	virtual void 
	report_test_end(Test<C> & test_, int passing_, int failing_, int depth_ = 0) noexcept override
	{
		if(_settings.report_test_end)
		{
			fprintf(_file_handle, "\n");
			_indent(depth_ * 2);
			fprintf(_file_handle, "[ %s ] %s -- %d/%d %s "
				, failing_ == 0 ? "Pass" : "Fail"
				, test_.name()
				, _settings.optimistic ? passing_ : failing_
				, (failing_+passing_)
				, _settings.optimistic ? "passing" : "failing");
			if(!(_settings.report_testcase_run || _settings.report_testcase_end || _settings.report_pass || _settings.report_fail))
			{
				fprintf(_file_handle, "-- %s:%d"
					, test_.position().file
					, test_.position().line);
			}
			fprintf(_file_handle, "\n");
			fflush(_file_handle);
		}
	}

	virtual void 
	report_testcase_run(Test<C> & test_, Testcase<C> & testcase_, int depth_ = 0) noexcept override
	{
		if(_settings.report_testcase_run)
		{
			fprintf(_file_handle, "\n");
			_indent(depth_ * 2 + 1);
			fprintf(_file_handle, "%s: ", testcase_.name());
			fflush(_file_handle);
		}
	}
	

	virtual void 
	report_testcase_end(Test<C> & test_, Testcase<C> & testcase_, int passing_, int failing_, int depth_ = 0) noexcept override
	{
		if(_settings.report_testcase_end)
		{
			if((passing_ != 0 && _settings.report_pass) || (failing_ != 0 && _settings.report_fail))
			{
				fprintf(_file_handle, "\n");
				_indent(depth_ * 2 + 1);
			}
			fprintf(_file_handle, "( %s ) ", failing_ == 0 ? "Pass" : "Fail");
			fflush(_file_handle);
		}
	}

	virtual void 
	report_pass(Test<C> & test_, Testcase<C> & testcase_, Assertion const & assertion, int depth_ = 0) noexcept override
	{
		if(_settings.report_pass)
			_report_assertion(assertion, depth_);
	}

	virtual void 
	report_fail(Test<C> & test_, Testcase<C> & testcase_, Assertion const & assertion, int depth_ = 0) noexcept override
	{
		if(_settings.report_fail)
			_report_assertion(assertion, depth_);
	}

	virtual void 
	report_unhandled_exception(Test<C> & test_, Testcase<C> & testcase_, int depth_ = 0) noexcept override
	{
		if(_settings.report_unhandled_exception)
		{
			fprintf(_file_handle, "\n");
			_indent(depth_ * 2 + 2);
			fprintf(_file_handle, "| Halt | unhandled exception -- %s:%d", testcase_.position().file, testcase_.position().line);
			fflush(_file_handle);
		}
	}

};


// snake-case aliases
using status       = Status;
using position     = Position;
using assertion    = Assertion;
using test_summary = TestSummary;
using reporter_settings = ReporterSettings;
template <class C> using reporter     = Reporter<C>;
template <class C> using std_printer  = StdPrinter<C>;
template <class C> using test      = Test<C>;
template <class C> using testcase  = Testcase<C>;

} // namespace pptest


#define PPTEST_ASSERT_IMPL(Command_, Breaking_, Pass_, ...) \
		_testcase_._on_assert(Pass_, _reporter_, _passing_, _failing_, \
			pptest::Assertion { Command_,#__VA_ARGS__, { __FILE__, __LINE__ }, Breaking_ }, _depth_)

#define PPTEST_ASSERT_THROW_IMPL(Command_, Breaking_, ExpectThrow_, Exception_, ...) \
	{ \
		bool caught_ = false;\
		try { __VA_ARGS__; } catch(Exception_) { caught_ = true; } catch(...) { caught_ = false; } \
		_testcase_._on_assert((ExpectThrow_ == caught_), _reporter_, _passing_, _failing_, \
			pptest::Assertion { Command_,#Exception_", "#__VA_ARGS__, { __FILE__, __LINE__ }, Breaking_ }, _depth_); \
	}

#define PPTEST_ASSERT_THROW_ANY_IMPL(Command_, Breaking_, ExpectThrow_, ...) \
	{ \
		bool caught_ = false;\
		try { __VA_ARGS__; } catch(...) { caught_ = true; } \
		_testcase_._on_assert((ExpectThrow_ == caught_), _reporter_, _passing_, _failing_, \
			pptest::Assertion { Command_,#__VA_ARGS__, { __FILE__, __LINE__ }, Breaking_ }, _depth_); \
	}


#define AssertTrue(...)    PPTEST_ASSERT_IMPL("Assert",true,(__VA_ARGS__ == true),__VA_ARGS__ == true)
#define AssertFalse(...)   PPTEST_ASSERT_IMPL("Assert",true,(__VA_ARGS__ == false),__VA_ARGS__ == false)
#define AssertNull(...)    PPTEST_ASSERT_IMPL("Assert",true,!(__VA_ARGS__),!(__VA_ARGS__))
#define AssertNotNull(...) PPTEST_ASSERT_IMPL("Assert",true,bool(__VA_ARGS__),bool(__VA_ARGS__))
#define AssertEQ(LHS,...)  PPTEST_ASSERT_IMPL("Assert",true,((LHS) == (__VA_ARGS__)),LHS == __VA_ARGS__)
#define AssertNEQ(LHS,...) PPTEST_ASSERT_IMPL("Assert",true,((LHS) != (__VA_ARGS__)),LHS != __VA_ARGS__)
#define AssertGT(LHS,...)  PPTEST_ASSERT_IMPL("Assert",true,((LHS) > (__VA_ARGS__)),LHS > __VA_ARGS__)
#define AssertLT(LHS,...)  PPTEST_ASSERT_IMPL("Assert",true,((LHS) < (__VA_ARGS__)),LHS < __VA_ARGS__)
#define AssertGE(LHS,...)  PPTEST_ASSERT_IMPL("Assert",true,((LHS) >= (__VA_ARGS__)),LHS >= __VA_ARGS__)
#define AssertLE(LHS,...)  PPTEST_ASSERT_IMPL("Assert",true,((LHS) <= (__VA_ARGS__)),LHS <= __VA_ARGS__)
#define AssertThrow(Exception,...)    PPTEST_ASSERT_THROW_IMPL("Assert_Throw",true,true,Exception,__VA_ARGS__)
#define AssertNoThrow(Exception,...)  PPTEST_ASSERT_THROW_IMPL("Assert_No_Throw",true,false,Exception,__VA_ARGS__)
#define AssertThrowAny(...)           PPTEST_ASSERT_THROW_ANY_IMPL("Assert_Throw_Any",true,true,__VA_ARGS__)
#define AssertThrowNone(...)          PPTEST_ASSERT_THROW_ANY_IMPL("Assert_Throw_None",true,false,__VA_ARGS__)

#define ExpectTrue(...)     PPTEST_ASSERT_IMPL("Expect",false,(__VA_ARGS__ == true),__VA_ARGS__ == true)
#define ExpectFalse(...)    PPTEST_ASSERT_IMPL("Expect",false,(__VA_ARGS__ == false),__VA_ARGS__ == false)
#define ExpectNull(...)     PPTEST_ASSERT_IMPL("Expect",false,!(__VA_ARGS__),!(__VA_ARGS__))
#define ExpectNotNull(...)  PPTEST_ASSERT_IMPL("Expect",false,bool(__VA_ARGS__),bool(__VA_ARGS__))
#define ExpectEQ(LHS,...)   PPTEST_ASSERT_IMPL("Expect",false,((LHS) == (__VA_ARGS__)),LHS == __VA_ARGS__)
#define ExpectNEQ(LHS,...)  PPTEST_ASSERT_IMPL("Expect",false,((LHS) != (__VA_ARGS__)),LHS != __VA_ARGS__)
#define ExpectGT(LHS,...)   PPTEST_ASSERT_IMPL("Expect",false,((LHS) > (__VA_ARGS__)),LHS > __VA_ARGS__)
#define ExpectLT(LHS,...)   PPTEST_ASSERT_IMPL("Expect",false,((LHS) < (__VA_ARGS__)),LHS < __VA_ARGS__)
#define ExpectGE(LHS,...)   PPTEST_ASSERT_IMPL("Expect",false,((LHS) >= (__VA_ARGS__)),LHS >= __VA_ARGS__)
#define ExpectLE(LHS,...)   PPTEST_ASSERT_IMPL("Expect",false,((LHS) <= (__VA_ARGS__)),LHS <= __VA_ARGS__)
#define ExpectThrow(Exception,...)    PPTEST_ASSERT_THROW_IMPL("Expect_Throw",false,true,Exception,__VA_ARGS__)
#define ExpectNoThrow(Exception,...)  PPTEST_ASSERT_THROW_IMPL("Expect_No_Throw",false,false,Exception,__VA_ARGS__)
#define ExpectThrowAny(...)           PPTEST_ASSERT_THROW_ANY_IMPL("Expect_Throw_Any",false,true,__VA_ARGS__)
#define ExpectThrowNone(...)          PPTEST_ASSERT_THROW_ANY_IMPL("Expect_Throw_None",false,false,__VA_ARGS__)

#define ASSERT_True(...)               AssertTrue(__VA_ARGS__)
#define ASSERT_False(...)              AssertFalse(__VA_ARGS__)
#define ASSERT_Null(...)               AssertNull(__VA_ARGS__)
#define ASSERT_NotNull(...)            AssertNotNull(__VA_ARGS__)
#define ASSERT_EQ(LHS,...)             AssertEQ(LHS,__VA_ARGS__)
#define ASSERT_NEQ(LHS,...)            AssertNEQ(LHS,__VA_ARGS__)
#define ASSERT_GT(LHS,...)             AssertGT(LHS,__VA_ARGS__)
#define ASSERT_LT(LHS,...)             AssertLT(LHS,__VA_ARGS__)
#define ASSERT_GE(LHS,...)             AssertGE(LHS,__VA_ARGS__)
#define ASSERT_LE(LHS,...)             AssertLE(LHS,__VA_ARGS__)
#define ASSERT_Throw(Exception,...)    AssertThrow(Exception,__VA_ARGS__)
#define ASSERT_NoThrow(Exception,...)  AssertNoThrow(Exception,__VA_ARGS__)
#define ASSERT_ThrowAny(...)           AssertThrowAny(__VA_ARGS__)
#define ASSERT_ThrowNone(...)          AssertThrowNone(__VA_ARGS__)

#define EXPECT_True(...)               ExpectTrue(__VA_ARGS__)
#define EXPECT_False(...)              ExpectFalse(__VA_ARGS__)
#define EXPECT_Null(...)               ExpectNull(__VA_ARGS__)
#define EXPECT_NotNull(...)            ExpectNotNull(__VA_ARGS__)
#define EXPECT_EQ(LHS,...)             ExpectEQ(LHS,__VA_ARGS__)
#define EXPECT_NEQ(LHS,...)            ExpectNEQ(LHS,__VA_ARGS__)
#define EXPECT_GT(LHS,...)             ExpectGT(LHS,__VA_ARGS__)
#define EXPECT_LT(LHS,...)             ExpectLT(LHS,__VA_ARGS__)
#define EXPECT_GE(LHS,...)             ExpectGE(LHS,__VA_ARGS__)
#define EXPECT_LE(LHS,...)             ExpectLE(LHS,__VA_ARGS__)
#define EXPECT_Throw(Exception,...)    ExpectThrow(Exception,__VA_ARGS__)
#define EXPECT_NoThrow(Exception,...)  ExpectNoThrow(Exception,__VA_ARGS__)
#define EXPECT_ThrowAny(...)           ExpectThrowAny(__VA_ARGS__)
#define EXPECT_ThrowNone(...)          ExpectThrowNone(__VA_ARGS__)

#define TESTCASE_ID(...) _##__VA_ARGS__
#define TESTCASE_PTR_ID(...) _tcptr_##__VA_ARGS__

// Test
#define Test(TestID) \
	class TestID : public pptest::Test<TestID>

// PreRun -- called before each run testcase
#define PreRun(TestID) \
	void prerun(pptest::Testcase<TestID> & _testcase_) override

// PostRun -- called after each run testcase
#define PostRun(TestID) \
	void postrun(pptest::Testcase<TestID> & _testcase_, int _passing_, int _failing_) noexcept override

// Testcase
#define Testcase(TestID,TestcaseID) \
	 public: \
		class TestcaseID : public pptest::Testcase<TestID> \
		{ \
			TestcaseID & _testcase_ = *this;\
		 public: \
			TestcaseID(TestID & test_) \
				: Testcase<TestID> { { __FILE__, __LINE__ }, &test_, #TestcaseID } \
			{} \
			void run(pptest::Reporter<TestID> & _reporter_, int & _passing_, int & _failing_, int _depth_ = 0) override 

// TestcaseEnd
#define TestcaseEnd(TestID,TestcaseID) \
		} TESTCASE_ID(TestcaseID) { *this }; \
	 private: \
		pptest::Testcase<TestID> * const TESTCASE_PTR_ID(TestcaseID) = &TESTCASE_ID(TestcaseID); \
	 public:

// Registry of testcases. Use Register(TestID,TestcaseID) inside
#define Registry(TestID) \
		friend class pptest::Test<TestID>; \
	 public: \
		TestID() \
			: pptest::Test<TestID> { { __FILE__, __LINE__ }, *this, #TestID } \
		{} \
	 private: \
		static constexpr thread_local pptest::Testcase<TestID> * const TestID::* \
		_pptest_testcase_mptrs[] \

// Register testcase
#define Register(TestID, TestcaseID) \
			&TestID::TESTCASE_PTR_ID(TestcaseID),

// TestEnd
#define TestEnd(TestID) \
	; \
	constexpr thread_local pptest::Testcase<TestID> * const TestID::* \
		TestID::_pptest_testcase_mptrs[];

#endif // PPTEST